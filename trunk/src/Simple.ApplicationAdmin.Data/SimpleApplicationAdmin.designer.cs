#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Simple.ApplicationAdmin.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Simple.ApplicationAdmin")]
	public partial class SimpleApplicationAdminDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertApplicationTenant(ApplicationTenant instance);
    partial void UpdateApplicationTenant(ApplicationTenant instance);
    partial void DeleteApplicationTenant(ApplicationTenant instance);
    #endregion
		
		public SimpleApplicationAdminDataContext() : 
				base(global::Simple.ApplicationAdmin.Data.Properties.Settings.Default.Simple_ApplicationAdminConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SimpleApplicationAdminDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SimpleApplicationAdminDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SimpleApplicationAdminDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SimpleApplicationAdminDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Application> Applications
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationTenant> ApplicationTenants
		{
			get
			{
				return this.GetTable<ApplicationTenant>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private System.DateTime _CreatedAt;
		
		private EntitySet<ApplicationTenant> _ApplicationTenants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    #endregion
		
		public Application()
		{
			this._ApplicationTenants = new EntitySet<ApplicationTenant>(new Action<ApplicationTenant>(this.attach_ApplicationTenants), new Action<ApplicationTenant>(this.detach_ApplicationTenants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_ApplicationTenant", Storage="_ApplicationTenants", ThisKey="Name", OtherKey="Application")]
		public EntitySet<ApplicationTenant> ApplicationTenants
		{
			get
			{
				return this._ApplicationTenants;
			}
			set
			{
				this._ApplicationTenants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationTenants(ApplicationTenant entity)
		{
			this.SendPropertyChanging();
			entity.Application1 = this;
		}
		
		private void detach_ApplicationTenants(ApplicationTenant entity)
		{
			this.SendPropertyChanging();
			entity.Application1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationTenant")]
	public partial class ApplicationTenant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Application;
		
		private string _TenantName;
		
		private string _Url;
		
		private bool _IsActive;
		
		private System.Xml.Linq.XElement _DatabaseConfiguration;
		
		private System.Xml.Linq.XElement _ApplicationConfiguration;
		
		private System.Nullable<System.DateTime> _ContractStartedAt;
		
		private System.Nullable<double> _GrossMonthly;
		
		private System.Nullable<double> _NetMonthly;
		
		private EntityRef<Application> _Application1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationChanging(string value);
    partial void OnApplicationChanged();
    partial void OnTenantNameChanging(string value);
    partial void OnTenantNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnDatabaseConfigurationChanging(System.Xml.Linq.XElement value);
    partial void OnDatabaseConfigurationChanged();
    partial void OnApplicationConfigurationChanging(System.Xml.Linq.XElement value);
    partial void OnApplicationConfigurationChanged();
    partial void OnContractStartedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnContractStartedAtChanged();
    partial void OnGrossMonthlyChanging(System.Nullable<double> value);
    partial void OnGrossMonthlyChanged();
    partial void OnNetMonthlyChanging(System.Nullable<double> value);
    partial void OnNetMonthlyChanged();
    #endregion
		
		public ApplicationTenant()
		{
			this._Application1 = default(EntityRef<Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Application
		{
			get
			{
				return this._Application;
			}
			set
			{
				if ((this._Application != value))
				{
					if (this._Application1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationChanging(value);
					this.SendPropertyChanging();
					this._Application = value;
					this.SendPropertyChanged("Application");
					this.OnApplicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenantName
		{
			get
			{
				return this._TenantName;
			}
			set
			{
				if ((this._TenantName != value))
				{
					this.OnTenantNameChanging(value);
					this.SendPropertyChanging();
					this._TenantName = value;
					this.SendPropertyChanged("TenantName");
					this.OnTenantNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseConfiguration", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement DatabaseConfiguration
		{
			get
			{
				return this._DatabaseConfiguration;
			}
			set
			{
				if ((this._DatabaseConfiguration != value))
				{
					this.OnDatabaseConfigurationChanging(value);
					this.SendPropertyChanging();
					this._DatabaseConfiguration = value;
					this.SendPropertyChanged("DatabaseConfiguration");
					this.OnDatabaseConfigurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationConfiguration", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement ApplicationConfiguration
		{
			get
			{
				return this._ApplicationConfiguration;
			}
			set
			{
				if ((this._ApplicationConfiguration != value))
				{
					this.OnApplicationConfigurationChanging(value);
					this.SendPropertyChanging();
					this._ApplicationConfiguration = value;
					this.SendPropertyChanged("ApplicationConfiguration");
					this.OnApplicationConfigurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractStartedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ContractStartedAt
		{
			get
			{
				return this._ContractStartedAt;
			}
			set
			{
				if ((this._ContractStartedAt != value))
				{
					this.OnContractStartedAtChanging(value);
					this.SendPropertyChanging();
					this._ContractStartedAt = value;
					this.SendPropertyChanged("ContractStartedAt");
					this.OnContractStartedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrossMonthly", DbType="Float")]
		public System.Nullable<double> GrossMonthly
		{
			get
			{
				return this._GrossMonthly;
			}
			set
			{
				if ((this._GrossMonthly != value))
				{
					this.OnGrossMonthlyChanging(value);
					this.SendPropertyChanging();
					this._GrossMonthly = value;
					this.SendPropertyChanged("GrossMonthly");
					this.OnGrossMonthlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetMonthly", DbType="Float")]
		public System.Nullable<double> NetMonthly
		{
			get
			{
				return this._NetMonthly;
			}
			set
			{
				if ((this._NetMonthly != value))
				{
					this.OnNetMonthlyChanging(value);
					this.SendPropertyChanging();
					this._NetMonthly = value;
					this.SendPropertyChanged("NetMonthly");
					this.OnNetMonthlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Application_ApplicationTenant", Storage="_Application1", ThisKey="Application", OtherKey="Name", IsForeignKey=true)]
		public Application Application1
		{
			get
			{
				return this._Application1.Entity;
			}
			set
			{
				Application previousValue = this._Application1.Entity;
				if (((previousValue != value) 
							|| (this._Application1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Application1.Entity = null;
						previousValue.ApplicationTenants.Remove(this);
					}
					this._Application1.Entity = value;
					if ((value != null))
					{
						value.ApplicationTenants.Add(this);
						this._Application = value.Name;
					}
					else
					{
						this._Application = default(string);
					}
					this.SendPropertyChanged("Application1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
